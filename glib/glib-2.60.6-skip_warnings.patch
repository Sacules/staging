--- glib/gmessages.c
+++ glib/gmessages.c
@@ -523,6 +523,35 @@
 
 /* --- functions --- */
 
+/* skip_message
+ *
+ * This internal function queries an optional environment variable, 
+ * GLIB_LOG_LEVEL and converts it to a value consistent
+ * with the type GLogLevelFlags.  If the value is equal to
+ * or greater than the integer equivalent of the log_level.
+ * then the function returns a boolean that indicates that
+ * loging the output should be skipped.
+ */
+
+static gboolean skip_message( GLogLevelFlags log_level);
+
+static gboolean skip_message( GLogLevelFlags log_level)
+{
+  char*    user_log_level;
+  int      user_log_int;
+  gboolean skip = FALSE;
+
+  user_log_level = getenv( "GLIB_LOG_LEVEL" );
+
+  user_log_int = ( user_log_level != NULL ) ? atoi( user_log_level ) : 0;
+  user_log_int = ( user_log_int   != 0    ) ? 1 << user_log_int      : 0;
+  
+  if ( user_log_int >= log_level ) skip = TRUE;
+ 
+  return skip;
+}
+
+
 static void _g_log_abort (gboolean breakpoint);
 
 static void
@@ -2496,6 +2525,9 @@
   g_return_val_if_fail (fields != NULL, G_LOG_WRITER_UNHANDLED);
   g_return_val_if_fail (n_fields > 0, G_LOG_WRITER_UNHANDLED);
 
+  /* If the user does not want this message level, just return */
+  if ( skip_message( log_level) ) return G_LOG_WRITER_HANDLED;
+
   stream = log_level_to_file (log_level);
   if (!stream || fileno (stream) < 0)
     return G_LOG_WRITER_UNHANDLED;
@@ -2640,6 +2672,9 @@
   FILE *stream;
   gsize i;
 
+  /* If the user does not want this message level, just return */
+  if ( skip_message( log_level) ) return G_LOG_WRITER_HANDLED;
+
   /* we cannot call _any_ GLib functions in this fallback handler,
    * which is why we skip UTF-8 conversion, etc.
    * since we either recursed or ran out of memory, we're in a pretty
